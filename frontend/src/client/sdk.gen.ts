// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginTestTokenResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  RoleDirsCreateRoleDirData,
  RoleDirsCreateRoleDirResponse,
  RoleDirsDeleteRoleDirData,
  RoleDirsDeleteRoleDirResponse,
  RoleDirsReadRoleDirByIdData,
  RoleDirsReadRoleDirByIdResponse,
  RoleDirsReadRoleDirsData,
  RoleDirsReadRoleDirsResponse,
  RoleDirsUpdateRoleDirData,
  RoleDirsUpdateRoleDirResponse,
  RolePromptsCreateRolePromptData,
  RolePromptsCreateRolePromptResponse,
  RolePromptsDeleteRolePromptData,
  RolePromptsDeleteRolePromptResponse,
  RolePromptsReadRolePromptByIdData,
  RolePromptsReadRolePromptByIdResponse,
  RolePromptsReadRolePromptsData,
  RolePromptsReadRolePromptsResponse,
  RolePromptsUpdateRolePromptData,
  RolePromptsUpdateRolePromptResponse,
  RoleTemplateItemsCreateRoleTemplateItemData,
  RoleTemplateItemsCreateRoleTemplateItemResponse,
  RoleTemplateItemsDeleteRoleTemplateItemData,
  RoleTemplateItemsDeleteRoleTemplateItemResponse,
  RoleTemplateItemsReadRoleTemplateItemByIdData,
  RoleTemplateItemsReadRoleTemplateItemByIdResponse,
  RoleTemplateItemsReadRoleTemplateItemsData,
  RoleTemplateItemsReadRoleTemplateItemsResponse,
  RoleTemplateItemsUpdateRoleTemplateItemData,
  RoleTemplateItemsUpdateRoleTemplateItemResponse,
  RoleTemplatesCreateRoleTemplateData,
  RoleTemplatesCreateRoleTemplateResponse,
  RoleTemplatesDeleteRoleTemplateData,
  RoleTemplatesDeleteRoleTemplateResponse,
  RoleTemplatesReadRoleTemplateByIdData,
  RoleTemplatesReadRoleTemplateByIdResponse,
  RoleTemplatesReadRoleTemplatesData,
  RoleTemplatesReadRoleTemplatesResponse,
  RoleTemplatesUpdateRoleTemplateData,
  RoleTemplatesUpdateRoleTemplateResponse,
  RolesCreateRoleData,
  RolesCreateRoleResponse,
  RolesDeleteRoleData,
  RolesDeleteRoleResponse,
  RolesReadRoleByIdData,
  RolesReadRoleByIdResponse,
  RolesReadRolesData,
  RolesReadRolesResponse,
  RolesUpdateRoleData,
  RolesUpdateRoleResponse,
  TaskCreatRolePromptsCreateTaskCreatRolePromptData,
  TaskCreatRolePromptsCreateTaskCreatRolePromptResponse,
  TaskCreatRolePromptsDeleteTaskCreatRolePromptData,
  TaskCreatRolePromptsDeleteTaskCreatRolePromptResponse,
  TaskCreatRolePromptsReadTaskCreatRolePromptByIdData,
  TaskCreatRolePromptsReadTaskCreatRolePromptByIdResponse,
  TaskCreatRolePromptsReadTaskCreatRolePromptsData,
  TaskCreatRolePromptsReadTaskCreatRolePromptsResponse,
  TaskCreatRolePromptsUpdateTaskCreatRolePromptData,
  TaskCreatRolePromptsUpdateTaskCreatRolePromptResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersReadUserMeResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserData,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
  UtilsHealthCheckResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
} from "./types.gen"

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class RoleDirsService {
  /**
   * Read Role Dirs
   * 获取角色分类列表（支持筛选）
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.ip 搜索IP分类名称（模糊匹配）
   * @param data.ipDesc 搜索IP描述（模糊匹配）
   * @returns RoleDirsPublic Successful Response
   * @throws ApiError
   */
  public static readRoleDirs(
    data: RoleDirsReadRoleDirsData = {},
  ): CancelablePromise<RoleDirsReadRoleDirsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-dirs/",
      query: {
        skip: data.skip,
        limit: data.limit,
        ip: data.ip,
        ip_desc: data.ipDesc,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Role Dir
   * 创建新的角色分类
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RoleDirPublic Successful Response
   * @throws ApiError
   */
  public static createRoleDir(
    data: RoleDirsCreateRoleDirData,
  ): CancelablePromise<RoleDirsCreateRoleDirResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/role-dirs/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Role Dir By Id
   * 根据ID获取指定角色分类
   * @param data The data for the request.
   * @param data.roleDirId
   * @returns RoleDirPublic Successful Response
   * @throws ApiError
   */
  public static readRoleDirById(
    data: RoleDirsReadRoleDirByIdData,
  ): CancelablePromise<RoleDirsReadRoleDirByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-dirs/{role_dir_id}",
      path: {
        role_dir_id: data.roleDirId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Role Dir
   * 更新角色分类
   * @param data The data for the request.
   * @param data.roleDirId
   * @param data.requestBody
   * @returns RoleDirPublic Successful Response
   * @throws ApiError
   */
  public static updateRoleDir(
    data: RoleDirsUpdateRoleDirData,
  ): CancelablePromise<RoleDirsUpdateRoleDirResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/role-dirs/{role_dir_id}",
      path: {
        role_dir_id: data.roleDirId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Role Dir
   * 删除角色分类
   * @param data The data for the request.
   * @param data.roleDirId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteRoleDir(
    data: RoleDirsDeleteRoleDirData,
  ): CancelablePromise<RoleDirsDeleteRoleDirResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/role-dirs/{role_dir_id}",
      path: {
        role_dir_id: data.roleDirId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class RolePromptsService {
  /**
   * Read Role Prompts
   * 获取角色提示词列表
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.roleId 角色ID筛选
   * @param data.version 版本号筛选
   * @param data.isActive 激活状态筛选(Y/N)
   * @returns RolePromptsPublic Successful Response
   * @throws ApiError
   */
  public static readRolePrompts(
    data: RolePromptsReadRolePromptsData = {},
  ): CancelablePromise<RolePromptsReadRolePromptsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-prompts/",
      query: {
        skip: data.skip,
        limit: data.limit,
        role_id: data.roleId,
        version: data.version,
        is_active: data.isActive,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Role Prompt
   * 创建角色提示词
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RolePromptPublic Successful Response
   * @throws ApiError
   */
  public static createRolePrompt(
    data: RolePromptsCreateRolePromptData,
  ): CancelablePromise<RolePromptsCreateRolePromptResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/role-prompts/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Role Prompt By Id
   * 根据ID获取角色提示词
   * @param data The data for the request.
   * @param data.rolePromptId
   * @returns RolePromptPublic Successful Response
   * @throws ApiError
   */
  public static readRolePromptById(
    data: RolePromptsReadRolePromptByIdData,
  ): CancelablePromise<RolePromptsReadRolePromptByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-prompts/{role_prompt_id}",
      path: {
        role_prompt_id: data.rolePromptId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Role Prompt
   * 更新角色提示词
   * @param data The data for the request.
   * @param data.rolePromptId
   * @param data.requestBody
   * @returns RolePromptPublic Successful Response
   * @throws ApiError
   */
  public static updateRolePrompt(
    data: RolePromptsUpdateRolePromptData,
  ): CancelablePromise<RolePromptsUpdateRolePromptResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/role-prompts/{role_prompt_id}",
      path: {
        role_prompt_id: data.rolePromptId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Role Prompt
   * 删除角色提示词
   * @param data The data for the request.
   * @param data.rolePromptId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteRolePrompt(
    data: RolePromptsDeleteRolePromptData,
  ): CancelablePromise<RolePromptsDeleteRolePromptResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/role-prompts/{role_prompt_id}",
      path: {
        role_prompt_id: data.rolePromptId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class RolesService {
  /**
   * Read Roles
   * 获取角色列表（支持筛选）
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.name 搜索角色名称（模糊匹配）
   * @param data.ipId 筛选IP分类ID
   * @param data.createFrom 搜索创建端（模糊匹配）
   * @param data.hasPrompts 是否有提示词(Y/N)
   * @returns RolesPublic Successful Response
   * @throws ApiError
   */
  public static readRoles(
    data: RolesReadRolesData = {},
  ): CancelablePromise<RolesReadRolesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/roles/",
      query: {
        skip: data.skip,
        limit: data.limit,
        name: data.name,
        ip_id: data.ipId,
        create_from: data.createFrom,
        has_prompts: data.hasPrompts,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Role
   * 创建新的角色
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RolePublic Successful Response
   * @throws ApiError
   */
  public static createRole(
    data: RolesCreateRoleData,
  ): CancelablePromise<RolesCreateRoleResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/roles/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Role By Id
   * 根据ID获取指定角色
   * @param data The data for the request.
   * @param data.roleId
   * @returns RolePublic Successful Response
   * @throws ApiError
   */
  public static readRoleById(
    data: RolesReadRoleByIdData,
  ): CancelablePromise<RolesReadRoleByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/roles/{role_id}",
      path: {
        role_id: data.roleId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Role
   * 更新角色
   * @param data The data for the request.
   * @param data.roleId
   * @param data.requestBody
   * @returns RolePublic Successful Response
   * @throws ApiError
   */
  public static updateRole(
    data: RolesUpdateRoleData,
  ): CancelablePromise<RolesUpdateRoleResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/roles/{role_id}",
      path: {
        role_id: data.roleId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Role
   * 删除角色
   * @param data The data for the request.
   * @param data.roleId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteRole(
    data: RolesDeleteRoleData,
  ): CancelablePromise<RolesDeleteRoleResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/roles/{role_id}",
      path: {
        role_id: data.roleId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class RoleTemplateItemsService {
  /**
   * Read Role Template Items
   * Retrieve role template items with optional filters.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.itemName 搜索条目名称（模糊匹配）
   * @param data.roleTmpId 角色模板ID筛选
   * @returns RoleTemplateItemsPublic Successful Response
   * @throws ApiError
   */
  public static readRoleTemplateItems(
    data: RoleTemplateItemsReadRoleTemplateItemsData = {},
  ): CancelablePromise<RoleTemplateItemsReadRoleTemplateItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-template-items/",
      query: {
        skip: data.skip,
        limit: data.limit,
        item_name: data.itemName,
        role_tmp_id: data.roleTmpId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Role Template Item
   * Create new role template item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RoleTemplateItemPublic Successful Response
   * @throws ApiError
   */
  public static createRoleTemplateItem(
    data: RoleTemplateItemsCreateRoleTemplateItemData,
  ): CancelablePromise<RoleTemplateItemsCreateRoleTemplateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/role-template-items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Role Template Item By Id
   * Get role template item by ID.
   * @param data The data for the request.
   * @param data.roleTemplateItemId
   * @returns RoleTemplateItemPublic Successful Response
   * @throws ApiError
   */
  public static readRoleTemplateItemById(
    data: RoleTemplateItemsReadRoleTemplateItemByIdData,
  ): CancelablePromise<RoleTemplateItemsReadRoleTemplateItemByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-template-items/{role_template_item_id}",
      path: {
        role_template_item_id: data.roleTemplateItemId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Role Template Item
   * Update a role template item.
   * @param data The data for the request.
   * @param data.roleTemplateItemId
   * @param data.requestBody
   * @returns RoleTemplateItemPublic Successful Response
   * @throws ApiError
   */
  public static updateRoleTemplateItem(
    data: RoleTemplateItemsUpdateRoleTemplateItemData,
  ): CancelablePromise<RoleTemplateItemsUpdateRoleTemplateItemResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/role-template-items/{role_template_item_id}",
      path: {
        role_template_item_id: data.roleTemplateItemId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Role Template Item
   * Delete a role template item.
   * @param data The data for the request.
   * @param data.roleTemplateItemId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteRoleTemplateItem(
    data: RoleTemplateItemsDeleteRoleTemplateItemData,
  ): CancelablePromise<RoleTemplateItemsDeleteRoleTemplateItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/role-template-items/{role_template_item_id}",
      path: {
        role_template_item_id: data.roleTemplateItemId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class RoleTemplatesService {
  /**
   * Read Role Templates
   * Retrieve role templates with optional filters.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.templateName 搜索模板名称（模糊匹配）
   * @param data.roleId 角色ID筛选
   * @param data.isActive 激活状态筛选(Y/N)
   * @returns RoleTemplatesPublic Successful Response
   * @throws ApiError
   */
  public static readRoleTemplates(
    data: RoleTemplatesReadRoleTemplatesData = {},
  ): CancelablePromise<RoleTemplatesReadRoleTemplatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-templates/",
      query: {
        skip: data.skip,
        limit: data.limit,
        template_name: data.templateName,
        role_id: data.roleId,
        is_active: data.isActive,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Role Template
   * Create new role template.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RoleTemplatePublic Successful Response
   * @throws ApiError
   */
  public static createRoleTemplate(
    data: RoleTemplatesCreateRoleTemplateData,
  ): CancelablePromise<RoleTemplatesCreateRoleTemplateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/role-templates/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Role Template By Id
   * Get role template by ID.
   * @param data The data for the request.
   * @param data.roleTemplateId
   * @returns RoleTemplatePublic Successful Response
   * @throws ApiError
   */
  public static readRoleTemplateById(
    data: RoleTemplatesReadRoleTemplateByIdData,
  ): CancelablePromise<RoleTemplatesReadRoleTemplateByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/role-templates/{role_template_id}",
      path: {
        role_template_id: data.roleTemplateId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Role Template
   * Update a role template.
   * @param data The data for the request.
   * @param data.roleTemplateId
   * @param data.requestBody
   * @returns RoleTemplatePublic Successful Response
   * @throws ApiError
   */
  public static updateRoleTemplate(
    data: RoleTemplatesUpdateRoleTemplateData,
  ): CancelablePromise<RoleTemplatesUpdateRoleTemplateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/role-templates/{role_template_id}",
      path: {
        role_template_id: data.roleTemplateId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Role Template
   * Delete a role template.
   * @param data The data for the request.
   * @param data.roleTemplateId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteRoleTemplate(
    data: RoleTemplatesDeleteRoleTemplateData,
  ): CancelablePromise<RoleTemplatesDeleteRoleTemplateResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/role-templates/{role_template_id}",
      path: {
        role_template_id: data.roleTemplateId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class TaskCreatRolePromptsService {
  /**
   * Read Task Creat Role Prompts
   * 获取角色创建提示词任务列表
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.taskName 任务名称筛选
   * @param data.taskState 任务状态筛选
   * @param data.roleId 角色ID筛选
   * @returns TaskCreatRolePromptsPublic Successful Response
   * @throws ApiError
   */
  public static readTaskCreatRolePrompts(
    data: TaskCreatRolePromptsReadTaskCreatRolePromptsData = {},
  ): CancelablePromise<TaskCreatRolePromptsReadTaskCreatRolePromptsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/task-creat-role-prompts/",
      query: {
        skip: data.skip,
        limit: data.limit,
        task_name: data.taskName,
        task_state: data.taskState,
        role_id: data.roleId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Task Creat Role Prompt
   * 创建角色创建提示词任务
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TaskCreatRolePromptPublic Successful Response
   * @throws ApiError
   */
  public static createTaskCreatRolePrompt(
    data: TaskCreatRolePromptsCreateTaskCreatRolePromptData,
  ): CancelablePromise<TaskCreatRolePromptsCreateTaskCreatRolePromptResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/task-creat-role-prompts/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Task Creat Role Prompt By Id
   * 根据ID获取角色创建提示词任务
   * @param data The data for the request.
   * @param data.taskPromptId
   * @returns TaskCreatRolePromptPublic Successful Response
   * @throws ApiError
   */
  public static readTaskCreatRolePromptById(
    data: TaskCreatRolePromptsReadTaskCreatRolePromptByIdData,
  ): CancelablePromise<TaskCreatRolePromptsReadTaskCreatRolePromptByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/task-creat-role-prompts/{task_prompt_id}",
      path: {
        task_prompt_id: data.taskPromptId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Task Creat Role Prompt
   * 更新角色创建提示词任务
   * @param data The data for the request.
   * @param data.taskPromptId
   * @param data.requestBody
   * @returns TaskCreatRolePromptPublic Successful Response
   * @throws ApiError
   */
  public static updateTaskCreatRolePrompt(
    data: TaskCreatRolePromptsUpdateTaskCreatRolePromptData,
  ): CancelablePromise<TaskCreatRolePromptsUpdateTaskCreatRolePromptResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/task-creat-role-prompts/{task_prompt_id}",
      path: {
        task_prompt_id: data.taskPromptId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Task Creat Role Prompt
   * 删除角色创建提示词任务
   * @param data The data for the request.
   * @param data.taskPromptId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteTaskCreatRolePrompt(
    data: TaskCreatRolePromptsDeleteTaskCreatRolePromptData,
  ): CancelablePromise<TaskCreatRolePromptsDeleteTaskCreatRolePromptResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/task-creat-role-prompts/{task_prompt_id}",
      path: {
        task_prompt_id: data.taskPromptId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users with optional filters.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.fullName 搜索全名（模糊匹配）
   * @param data.email 搜索邮箱（模糊匹配）
   * @param data.role 用户角色，可选值：superuser, user
   * @param data.status 用户状态，可选值：active, inactive
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
        full_name: data.fullName,
        email: data.email,
        role: data.role,
        status: data.status,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
